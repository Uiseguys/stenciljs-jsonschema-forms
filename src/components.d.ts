/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';


declare global {

  namespace StencilComponents {
    interface CwcStyles {

    }
  }

  interface HTMLCwcStylesElement extends StencilComponents.CwcStyles, HTMLStencilElement {}

  var HTMLCwcStylesElement: {
    prototype: HTMLCwcStylesElement;
    new (): HTMLCwcStylesElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-styles': HTMLCwcStylesElement;
  }
  interface ElementTagNameMap {
    'cwc-styles': HTMLCwcStylesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-styles': JSXElements.CwcStylesAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcStylesAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyCheckbox {
      'for': string;
      'id': string;
      'labelContent': string;
      'placeholder': string;
      'value': boolean;
    }
  }

  interface HTMLMyCheckboxElement extends StencilComponents.MyCheckbox, HTMLStencilElement {}

  var HTMLMyCheckboxElement: {
    prototype: HTMLMyCheckboxElement;
    new (): HTMLMyCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'my-checkbox': HTMLMyCheckboxElement;
  }
  interface ElementTagNameMap {
    'my-checkbox': HTMLMyCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-checkbox': JSXElements.MyCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface MyCheckboxAttributes extends HTMLAttributes {
      'for'?: string;
      'id'?: string;
      'labelContent'?: string;
      'onPostValue'?: (event: CustomEvent) => void;
      'placeholder'?: string;
      'value'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyDropdown {
      'for': string;
      'id': string;
      'labelContent': string;
      'placeholder': string;
      'value': string;
    }
  }

  interface HTMLMyDropdownElement extends StencilComponents.MyDropdown, HTMLStencilElement {}

  var HTMLMyDropdownElement: {
    prototype: HTMLMyDropdownElement;
    new (): HTMLMyDropdownElement;
  };
  interface HTMLElementTagNameMap {
    'my-dropdown': HTMLMyDropdownElement;
  }
  interface ElementTagNameMap {
    'my-dropdown': HTMLMyDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-dropdown': JSXElements.MyDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface MyDropdownAttributes extends HTMLAttributes {
      'for'?: string;
      'id'?: string;
      'labelContent'?: string;
      'onPostValue'?: (event: CustomEvent) => void;
      'placeholder'?: string;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyDynamicForm {
      'ajv': any;
      'form': any;
      'schema': any;
    }
  }

  interface HTMLMyDynamicFormElement extends StencilComponents.MyDynamicForm, HTMLStencilElement {}

  var HTMLMyDynamicFormElement: {
    prototype: HTMLMyDynamicFormElement;
    new (): HTMLMyDynamicFormElement;
  };
  interface HTMLElementTagNameMap {
    'my-dynamic-form': HTMLMyDynamicFormElement;
  }
  interface ElementTagNameMap {
    'my-dynamic-form': HTMLMyDynamicFormElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-dynamic-form': JSXElements.MyDynamicFormAttributes;
    }
  }
  namespace JSXElements {
    export interface MyDynamicFormAttributes extends HTMLAttributes {
      'ajv'?: any;
      'form'?: any;
      'schema'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyInput {
      'for': string;
      'format': any;
      'id': string;
      'labelContent': string;
      'placeholder': string;
      'value': any;
    }
  }

  interface HTMLMyInputElement extends StencilComponents.MyInput, HTMLStencilElement {}

  var HTMLMyInputElement: {
    prototype: HTMLMyInputElement;
    new (): HTMLMyInputElement;
  };
  interface HTMLElementTagNameMap {
    'my-input': HTMLMyInputElement;
  }
  interface ElementTagNameMap {
    'my-input': HTMLMyInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-input': JSXElements.MyInputAttributes;
    }
  }
  namespace JSXElements {
    export interface MyInputAttributes extends HTMLAttributes {
      'for'?: string;
      'format'?: any;
      'id'?: string;
      'labelContent'?: string;
      'onPostValue'?: (event: CustomEvent) => void;
      'placeholder'?: string;
      'value'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FormPage {

    }
  }

  interface HTMLFormPageElement extends StencilComponents.FormPage, HTMLStencilElement {}

  var HTMLFormPageElement: {
    prototype: HTMLFormPageElement;
    new (): HTMLFormPageElement;
  };
  interface HTMLElementTagNameMap {
    'form-page': HTMLFormPageElement;
  }
  interface ElementTagNameMap {
    'form-page': HTMLFormPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'form-page': JSXElements.FormPageAttributes;
    }
  }
  namespace JSXElements {
    export interface FormPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StenciljsJsonschemaForms {
      'root': string;
    }
  }

  interface HTMLStenciljsJsonschemaFormsElement extends StencilComponents.StenciljsJsonschemaForms, HTMLStencilElement {}

  var HTMLStenciljsJsonschemaFormsElement: {
    prototype: HTMLStenciljsJsonschemaFormsElement;
    new (): HTMLStenciljsJsonschemaFormsElement;
  };
  interface HTMLElementTagNameMap {
    'stenciljs-jsonschema-forms': HTMLStenciljsJsonschemaFormsElement;
  }
  interface ElementTagNameMap {
    'stenciljs-jsonschema-forms': HTMLStenciljsJsonschemaFormsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stenciljs-jsonschema-forms': JSXElements.StenciljsJsonschemaFormsAttributes;
    }
  }
  namespace JSXElements {
    export interface StenciljsJsonschemaFormsAttributes extends HTMLAttributes {
      'root'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
